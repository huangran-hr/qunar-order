buildscript {
	repositories {
		maven {
			url "https://nexus.mvmyun.com/repository/maven-public/"
		}
	}
}

plugins {
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'groovy'
	id 'org.springframework.cloud.contract' version '2.2.4.RELEASE'
	id 'maven-publish'
	id "com.google.cloud.tools.jib" version "2.6.0"
}

ext {
	set('springCloudVersion', "Hoxton.SR8")
	set('artifactId', "hotel-qunar-order")
	set('HARBOR_HOST', "${findProperty('pro') ? 'registry.cn-beijing.aliyuncs.com' : 'harbor.mvmyun.com'}") // project arg
	//set('username', System.getProperty("username")) // jvm arg
	//set('password', "${findProperty('password')}")
	set('username', System.getenv("CONTAINER_REPO_USERNAME")) //System env variable
	set('password', System.getenv("CONTAINER_REPO_PASSWORD"))
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

group = 'com.sjlh.qunar'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'


def releaseTime() {
	return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
}

jib {
	from {
		image = 'harbor.mvmyun.com/library/openjdk:11.0.7-jre-slim'
	}
	to {
		image = "${HARBOR_HOST}/hotel/${artifactId}"
		tags = ['latest', "${project.version}-${releaseTime()}"]
        auth {
            username = System.getenv("CONTAINER_REPO_USERNAME") // Defined in 'gradle.properties'.
            password = System.getenv("CONTAINER_REPO_PASSWORD")
        }
	}
	container {
		creationTime = 'USE_CURRENT_TIMESTAMP'
		jvmFlags = ['-Duser.timezone=Asia/Shanghai', '-Djava.security.egd=file:/dev/./urandom']
	}
	allowInsecureRegistries = true
}

repositories {
	maven {
		url "https://nexus.mvmyun.com/repository/maven-public/"
	}
}
dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation ('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client') {
		exclude group: 'javax.ws.rs'
	}
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'com.sjlh.springmvc:springmvc-log:0.0.1-SNAPSHOT'
	implementation 'com.sjlh.qunar:qunar-client-spring:0.0.3'
	implementation 'com.sjlh.hotel:crs-client:0.0.2'
	implementation 'com.ctrip.framework.apollo:apollo-client:1.6.0'
//	implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-all' //@FeignClient 使用url 就不需要此包
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'mysql:mysql-connector-java'
	runtimeOnly 'org.springframework.kafka:spring-kafka'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

contracts {
	failOnNoContracts false
}
